{
  "version": "experimental",
  "tags": [
    {
      "name": "rm-app",
      "path": "./src\\App.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    ${commonStyles}\\r\\n\\r\\n    .content {\\r\\n      display: block;\\r\\n\\r\\n      ${cssPadding(2)};\\r\\n      ${cssBorder()};\\r\\n      ${cssBorderRadius()};\\r\\n    }\\r\\n\\r\\n    .square {\\r\\n      ${cssFlexFullAlign()};\\r\\n      ${cssSquare(16)};\\r\\n      font-size: ${size(12)};\\r\\n      background: ${palette.yellow100};\\r\\n      border-radius: ${size(1 / 2)};\\r\\n      color: ${palette.white};\\r\\n    }\\r\\n\\r\\n    rm-textarea {\\r\\n      margin-top: ${size(2)};\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "pages-navigation-menu",
      "path": "./src\\components\\pages-navigation-menu\\definitions.ts",
      "attributes": [
        {
          "name": "activePage",
          "type": "ENavigationPages | undefined"
        }
      ],
      "properties": [
        {
          "name": "activePage",
          "attribute": "activePage",
          "type": "ENavigationPages | undefined"
        },
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    ${commonStyles}\\r\\n\\r\\n    .navigation-menu {\\r\\n      background: ${palette.gray100};\\r\\n    }\\r\\n\\r\\n    .menu-links {\\r\\n      ${cssFlexFullAlign()};\\r\\n    }\\r\\n\\r\\n    .menu-link {\\r\\n      ${cssFlexAlignItems()};\\r\\n      ${cssPadding(1, 2)};\\r\\n      height: 100%;\\r\\n      color: ${palette.white};\\r\\n      ${cssTransition(\\\"background\\\")};\\r\\n    }\\r\\n    .menu-link:hover,\\r\\n    .menu-link.active {\\r\\n      background: ${palette.gray90};\\r\\n      color: ${palette.white};\\r\\n    }\\r\\n\\r\\n    .menu-link rm-icon {\\r\\n      fill: ${palette.white};\\r\\n      margin-right: ${size(1)};\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "rm-button",
      "path": "./src\\components\\rm-button\\definitions.ts",
      "attributes": [
        {
          "name": "theme",
          "type": "string",
          "default": "\"rmButtonThemes.default.toString()\""
        },
        {
          "name": "isLoading",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        }
      ],
      "properties": [
        {
          "name": "theme",
          "attribute": "theme",
          "type": "string",
          "default": "\"rmButtonThemes.default.toString()\""
        },
        {
          "name": "isLoading",
          "attribute": "isLoading",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    button.rm-button {\\r\\n      position: relative;\\r\\n      padding: ${size(1)};\\r\\n      background: ${palette.blue100};\\r\\n      color: ${palette.white};\\r\\n      ${cssBorder()};\\r\\n      ${cssBorderRadius()};\\r\\n\\r\\n      ${cssTransition('background')};\\r\\n      cursor: pointer;\\r\\n    }\\r\\n\\r\\n    button.rm-button:hover {\\r\\n      background: ${palette.blue90};\\r\\n    }\\r\\n\\r\\n    button.rm-button:active {\\r\\n      background: ${palette.blue80};\\r\\n    }\\r\\n\\r\\n    button.rm-button:disabled {\\r\\n      background: ${palette.blue50};\\r\\n      cursor: not-allowed;\\r\\n    }\\r\\n\\r\\n    button.rm-button.${rmButtonThemes.danger.css} { background: ${palette.red100}; }\\r\\n    button.rm-button.${rmButtonThemes.danger.css}:hover { background: ${palette.red90}; }\\r\\n    button.rm-button.${rmButtonThemes.danger.css}:active { background: ${palette.red80}; }\\r\\n    button.rm-button.${rmButtonThemes.danger.css}:disabled { background: ${palette.red50}; }\\r\\n\\r\\n    button.rm-button.${rmButtonThemes.success.css} { background: ${palette.green100}; }\\r\\n    button.rm-button.${rmButtonThemes.success.css}:hover { background: ${palette.green90}; }\\r\\n    button.rm-button.${rmButtonThemes.success.css}:active { background: ${palette.green80}; }\\r\\n    button.rm-button.${rmButtonThemes.success.css}:disabled { background: ${palette.green50}; }\\r\\n\\r\\n    rm-loading-circle {\\r\\n      ${cssSquare(2)};\\r\\n    }\\r\\n\\r\\n    .loading {\\r\\n      position: absolute;\\r\\n      top: calc(50% - ${size(1)});\\r\\n      left: calc(50% - ${size(1)});\\r\\n    }\\r\\n\\r\\n    :host([isLoading]) .slot-content {\\r\\n      opacity: 0 !important;\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "rm-icon",
      "path": "./src\\components\\rm-icon\\definitions.ts",
      "attributes": [
        {
          "name": "icon",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "icon",
          "attribute": "icon",
          "type": "string"
        },
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    :host {\\r\\n      ${cssFlexFullAlign(\\\"inline-flex\\\")};\\r\\n      ${cssSquare(2)};\\r\\n      user-select: none;\\r\\n    }\\r\\n\\r\\n    :host svg {\\r\\n      pointer-events: none;\\r\\n      width: 100%;\\r\\n      height: 100%;\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "rm-input",
      "path": "./src\\components\\rm-input\\definitions.ts",
      "attributes": [
        {
          "name": "value",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "name",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "placeholder",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "inputState",
          "type": "string",
          "default": "\"rmInputClasses.default.toString()\""
        },
        {
          "name": "validators",
          "type": "TFormValidator[]",
          "default": "[]"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        }
      ],
      "properties": [
        {
          "name": "value",
          "attribute": "value",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "name",
          "attribute": "name",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "inputState",
          "attribute": "inputState",
          "type": "string",
          "default": "\"rmInputClasses.default.toString()\""
        },
        {
          "name": "validators",
          "attribute": "validators",
          "type": "TFormValidator[]",
          "default": "[]"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "onInput",
          "type": "(name: any, value: string) => void",
          "default": "\"noop\""
        },
        {
          "name": "onChange",
          "type": "(name: any, value: string) => void",
          "default": "\"noop\""
        },
        {
          "name": "onKeyUp",
          "type": "(name: any, event: KeyboardEvent) => void",
          "default": "\"noop\""
        },
        {
          "name": "onValidationChange",
          "type": "(name: any, validation: boolean) => void",
          "default": "\"noop\""
        },
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    :host {\\r\\n      display: block;\\r\\n    }\\r\\n\\r\\n    input {\\r\\n      display: block;\\r\\n      box-sizing: border-box;\\r\\n      width: 100%;\\r\\n      ${cssPadding(0.5, 1)};\\r\\n      ${cssBorder(\\\"2px\\\", palette.gray10)};\\r\\n      ${cssBorderRadius()};\\r\\n      outline: none;\\r\\n      font-family: var(--mainFont);\\r\\n\\r\\n      ${cssTransition()};\\r\\n      resize: none;\\r\\n    }\\r\\n    input:focus {\\r\\n      ${cssBorder(\\\"2px\\\", palette.blue50)};\\r\\n    }\\r\\n    input:disabled {\\r\\n      background: ${palette.gray01};\\r\\n      cursor: not-allowed;\\r\\n    }\\r\\n\\r\\n    input.${rmInputClasses.success.css} { border-color: ${palette.green50}; }\\r\\n    input.${rmInputClasses.success.css}:focus { border-color: ${palette.green100}; }\\r\\n\\r\\n    input.${rmInputClasses.error.css} { border-color: ${palette.red50}; }\\r\\n    input.${rmInputClasses.error.css}:focus { border-color: ${palette.red100}; }\\r\\n\\r\\n    .error-message {\\r\\n      font-size: ${fontSize.tiny};\\r\\n      margin-top: ${size(0.5)};\\r\\n      color: ${palette.red100};\\r\\n    }\\r\\n\\r\\n    input.rm-input.error {\\r\\n      border-color: ${palette.red100};\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "rm-loading-circle",
      "path": "./src\\components\\rm-loading-circle\\definitions.ts",
      "attributes": [
        {
          "name": "size",
          "type": "number",
          "default": "2"
        },
        {
          "name": "color",
          "type": "CSSResultGroup",
          "default": "\"white\""
        }
      ],
      "properties": [
        {
          "name": "size",
          "attribute": "size",
          "type": "number",
          "default": "2"
        },
        {
          "name": "color",
          "attribute": "color",
          "type": "CSSResultGroup",
          "default": "\"white\""
        },
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    :host {\\r\\n      ${cssFlexFullAlign(\\\"inline-flex\\\")};\\r\\n      ${cssSquare(2)};\\r\\n    }\\r\\n\\r\\n    rm-icon {\\r\\n      ${cssSquare(\\\"100%\\\")};\\r\\n      animation-name: circleAround;\\r\\n      animation-duration: 1s;\\r\\n      animation-iteration-count: infinite;\\r\\n      transform-origin: center center;\\r\\n      animation-timing-function: linear;\\r\\n    }\\r\\n\\r\\n    @keyframes circleAround {\\r\\n      from {\\r\\n        transform: rotate(0deg);\\r\\n      }\\r\\n\\r\\n      to {\\r\\n        transform: rotate(360deg);\\r\\n      }\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "rm-tab",
      "path": "./src\\components\\rm-tabs\\components\\rm-tab\\definitions.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    :host {\\r\\n      ${cssPadding(1)};\\r\\n      ${cssBorder(\\\"2px\\\")};\\r\\n      ${cssTransition(\\\"border-color\\\")};\\r\\n      cursor: pointer;\\r\\n    }\\r\\n\\r\\n    :host(.selected) {\\r\\n      cursor: default;\\r\\n      border-bottom-color: ${palette.blue100};\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "rm-tabs",
      "path": "./src\\components\\rm-tabs\\definitions.ts",
      "attributes": [
        {
          "name": "selectedTabName",
          "type": "string | undefined"
        },
        {
          "name": "tabs",
          "type": "TRmTab[]",
          "default": "[]"
        },
        {
          "name": "onTabSelected",
          "type": "(tab: TRmTab) => void",
          "default": "\"noop\""
        }
      ],
      "properties": [
        {
          "name": "selectedTabName",
          "attribute": "selectedTabName",
          "type": "string | undefined"
        },
        {
          "name": "tabs",
          "attribute": "tabs",
          "type": "TRmTab[]",
          "default": "[]"
        },
        {
          "name": "onTabSelected",
          "attribute": "onTabSelected",
          "type": "(tab: TRmTab) => void",
          "default": "\"noop\""
        },
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    .tabs {\\r\\n      ${cssFlexFullAlign()};\\r\\n    }\\r\\n\\r\\n    rm-tab {\\r\\n      border-top-left-radius: ${size(1)};\\r\\n      border-bottom-left-radius: ${size(1)};\\r\\n    }\\r\\n    rm-tab + rm-tab {\\r\\n      border-top-left-radius: 0;\\r\\n      border-bottom-left-radius: 0;\\r\\n      border-left: none;\\r\\n    }\\r\\n    rm-tab:last-child {\\r\\n      border-top-right-radius: ${size(1)};\\r\\n      border-bottom-right-radius: ${size(1)};\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "rm-textarea",
      "path": "./src\\components\\rm-textarea\\definitions.ts",
      "attributes": [
        {
          "name": "value",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "placeholder",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "inputState",
          "type": "string",
          "default": "\"rmTextareaClasses.default.toString()\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "rows",
          "type": "number",
          "default": "5"
        },
        {
          "name": "errorMessage",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "value",
          "attribute": "value",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "inputState",
          "attribute": "inputState",
          "type": "string",
          "default": "\"rmTextareaClasses.default.toString()\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "spellcheck",
          "attribute": "spellcheck",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "rows",
          "attribute": "rows",
          "type": "number",
          "default": "5"
        },
        {
          "name": "errorMessage",
          "attribute": "errorMessage",
          "type": "string | undefined"
        },
        {
          "name": "onInput",
          "type": "(event: InputEvent) => void",
          "default": "\"noop\""
        },
        {
          "name": "onChange",
          "type": "(event: InputEvent) => void",
          "default": "\"noop\""
        },
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    :host {\\r\\n      display: block;\\r\\n    }\\r\\n\\r\\n    textarea.rm-textarea {\\r\\n      display: block;\\r\\n      box-sizing: border-box;\\r\\n      width: 100%;\\r\\n      padding: ${size(2)};\\r\\n      font-family: var(--mainFont);\\r\\n      ${cssBorder('2px', palette.gray10)};\\r\\n      ${cssBorderRadius()};\\r\\n      outline: none;\\r\\n\\r\\n      ${cssTransition()};\\r\\n      resize: none;\\r\\n    }\\r\\n    textarea.rm-textarea.${rmTextareaClasses.error.css} { border-color: ${palette.red50}; }\\r\\n    textarea.rm-textarea.${rmTextareaClasses.success.css} { border-color: ${palette.green50}; }\\r\\n    textarea.rm-textarea:disabled {\\r\\n      background: ${palette.gray01};\\r\\n      cursor: not-allowed;\\r\\n    }\\r\\n\\r\\n    textarea.rm-textarea:focus {\\r\\n      ${cssBorder('2px', palette.blue50)};\\r\\n    }\\r\\n    textarea.rm-textarea.${rmTextareaClasses.error.css}:focus { border-color: ${palette.red100}; }\\r\\n    textarea.rm-textarea.${rmTextareaClasses.success.css}:focus { border-color: ${palette.green100}; }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "experiments-calq",
      "path": "./src\\experiments\\calq\\definitions.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    ${commonStyles}\\r\\n    ${pageStyles}\\r\\n\\r\\n    .label {\\r\\n      margin-bottom: ${size(1 / 2)};\\r\\n      color: ${palette.gray80};\\r\\n    }\\r\\n\\r\\n    .page-header {\\r\\n      ${cssFlexFullAlign()};\\r\\n    }\\r\\n\\r\\n    .header-icon {\\r\\n      ${cssSquare(6)};\\r\\n      margin-right: ${size(1)};\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "experiments-japanese",
      "path": "./src\\experiments\\japanese\\definitions.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    ${commonStyles}\\r\\n    ${pageStyles}\\r\\n\\r\\n    .label {\\r\\n      margin-bottom: ${size(1 / 2)};\\r\\n      color: ${palette.gray80};\\r\\n    }\\r\\n\\r\\n    .page-header {\\r\\n      ${cssFlexFullAlign()};\\r\\n    }\\r\\n\\r\\n    .header-icon {\\r\\n      ${cssSquare(6)};\\r\\n      margin-right: ${size(1)};\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "get-random-number-form",
      "path": "./src\\experiments\\random\\components\\getRandomNumberForm\\definitions.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    ${commonStyles}\\r\\n\\r\\n    h3 {\\r\\n      text-align: center;\\r\\n    }\\r\\n\\r\\n    .range-block,\\r\\n    .submit-block {\\r\\n      ${cssFlexJustifyContent()};\\r\\n    }\\r\\n\\r\\n    .range-block {\\r\\n      margin-bottom: ${size(2)};\\r\\n    }\\r\\n\\r\\n    .range-block > .form-block + .form-block {\\r\\n      margin-left: ${size(2)};\\r\\n    }\\r\\n\\r\\n    .label {\\r\\n      margin-bottom: ${size(1 / 2)};\\r\\n      color: ${palette.gray80};\\r\\n    }\\r\\n\\r\\n    ${cssCls(classNames.RESULT_WRAPPER)} {\\r\\n      ${cssFlexFullAlign()};\\r\\n    }\\r\\n\\r\\n    ${cssCls(classNames.RESULT)} {\\r\\n      position: relative;\\r\\n      width: 100%;\\r\\n      height: ${size(4)};\\r\\n      margin-top: ${size(2)};\\r\\n      overflow: hidden;\\r\\n      ${cssFlexFullAlign()};\\r\\n      ${cssPadding(2)};\\r\\n      ${cssBorder()};\\r\\n      ${cssBorderRadius()};\\r\\n      font-size: ${fontSize.huge};\\r\\n    }\\r\\n\\r\\n    ${cssCls(classNames.RESULT_VALUE)} {\\r\\n      position: absolute;\\r\\n      top: -1000px;\\r\\n    }\\r\\n\\r\\n    ${cssMedia((index) => css`\\r\\n      ${cssCls(classNames.RESULT)} {\\r\\n        width: ${100 - index * 15}%;\\r\\n      }\\r\\n    `)}\\r\\n  `\""
        }
      ]
    },
    {
      "name": "get-yes-or-no-form",
      "path": "./src\\experiments\\random\\components\\getYesOrNoForm\\definitions.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    ${commonStyles}\\r\\n\\r\\n    h3 {\\r\\n      text-align: center;\\r\\n    }\\r\\n\\r\\n    .range-block,\\r\\n    .submit-block {\\r\\n      ${cssFlexJustifyContent()};\\r\\n    }\\r\\n\\r\\n    .range-block {\\r\\n      margin-bottom: ${size(2)};\\r\\n    }\\r\\n\\r\\n    .range-block > .form-block + .form-block {\\r\\n      margin-left: ${size(2)};\\r\\n    }\\r\\n\\r\\n    .label {\\r\\n      margin-bottom: ${size(1 / 2)};\\r\\n      color: ${palette.gray80};\\r\\n    }\\r\\n\\r\\n    ${cssCls(classNames.RESULT_WRAPPER)} {\\r\\n      ${cssFlexFullAlign()};\\r\\n    }\\r\\n\\r\\n    ${cssCls(classNames.RESULT)} {\\r\\n      position: relative;\\r\\n      height: ${size(4)};\\r\\n      margin-top: ${size(2)};\\r\\n      overflow: hidden;\\r\\n      ${cssFlexFullAlign()};\\r\\n      ${cssPadding(2)};\\r\\n      ${cssBorder()};\\r\\n      ${cssBorderRadius()};\\r\\n      font-size: ${fontSize.huge};\\r\\n    }\\r\\n\\r\\n    ${cssCls(classNames.RESULT_VALUE)} {\\r\\n      position: absolute;\\r\\n      top: -1000px;\\r\\n    }\\r\\n\\r\\n    ${cssMedia((index) => css`\\r\\n      ${cssCls(classNames.RESULT)} {\\r\\n        width: calc(100% - ${index * 15}%);\\r\\n      }\\r\\n    `)}\\r\\n  `\""
        }
      ]
    },
    {
      "name": "experiments-random",
      "path": "./src\\experiments\\random\\definitions.ts",
      "attributes": [
        {
          "name": "selectedTabName",
          "type": "EPageRandomTabs",
          "default": "\"yes-no\""
        }
      ],
      "properties": [
        {
          "name": "selectedTabName",
          "attribute": "selectedTabName",
          "type": "EPageRandomTabs",
          "default": "\"yes-no\""
        },
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    ${commonStyles}\\r\\n    ${pageStyles}\\r\\n\\r\\n    .page-header {\\r\\n      ${cssFlexFullAlign()};\\r\\n    }\\r\\n\\r\\n    .page-tabs {\\r\\n      margin-bottom: ${size(2)};\\r\\n    }\\r\\n\\r\\n    .header-icon {\\r\\n      ${cssSquare(6)};\\r\\n      margin-right: ${size(1)};\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "page-about",
      "path": "./src\\pages\\about\\definitions.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    ${commonStyles}\\r\\n    ${pageStyles}\\r\\n\\r\\n    p {\\r\\n      margin: 0;\\r\\n    }\\r\\n\\r\\n    .contacts-block-wrapper {\\r\\n      margin: ${size(1)} 0 ${size(2)} 0;\\r\\n    }\\r\\n\\r\\n    .contacts, .cv-block {\\r\\n      display: inline-flex;\\r\\n      flex-direction: column;\\r\\n    }\\r\\n\\r\\n    .list-link {\\r\\n      display: block;\\r\\n    }\\r\\n    .list-link + .list-link {\\r\\n      margin-top: ${size(1)};\\r\\n    }\\r\\n\\r\\n    .icon-link {\\r\\n      ${cssFlexAlignItems(\\\"inline-flex\\\")};\\r\\n    }\\r\\n\\r\\n    .contacts rm-icon {\\r\\n      ${cssSquare(2.5)};\\r\\n      margin: 0 ${size(1)};\\r\\n    }\\r\\n\\r\\n    .cv-block {\\r\\n      margin-top: ${size(1)};\\r\\n    }\\r\\n  `\""
        }
      ]
    },
    {
      "name": "page-home",
      "path": "./src\\pages\\home\\definitions.ts",
      "properties": [
        {
          "name": "styles",
          "type": "CSSResultGroup",
          "default": "\"css`\\r\\n    ${commonStyles}\\r\\n    ${pageStyles}\\r\\n\\r\\n    .experiment {\\r\\n      display: flex;\\r\\n    }\\r\\n    .experiment + .experiment {\\r\\n      margin-top: ${size(2)};\\r\\n    }\\r\\n\\r\\n    .experiment h3 {\\r\\n      margin: 0;\\r\\n    }\\r\\n\\r\\n    .experiment-image {\\r\\n      ${cssSquare(6)};\\r\\n      margin-right: ${size(2)};\\r\\n    }\\r\\n  `\""
        }
      ]
    }
  ]
}